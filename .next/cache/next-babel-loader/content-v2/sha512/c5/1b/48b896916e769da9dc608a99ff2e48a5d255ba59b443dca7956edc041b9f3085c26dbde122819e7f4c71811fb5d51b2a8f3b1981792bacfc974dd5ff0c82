{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/dima/Desktop/next-practise/next-notes/components/ContactForm/index.js\";\nimport React from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport classes from '*.module.css';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '100%',\n      background: 'white'\n    }\n  },\n  input: {\n    color: 'white'\n  },\n  button: {\n    margin: theme.spacing(1)\n  }\n}));\nconst validationSchema = Yup.object({\n  email: Yup.string().email('Invalid email type!').required('Required'),\n  theme: Yup.string().max(30, 'Must be 30 characters or less!').required('Required'),\n  question: Yup.string().max(200, 'Must be 200 characters or less!').required('Required')\n});\nexport default function ContactForm() {\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      theme: '',\n      question: ''\n    },\n    validationSchema,\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      alert(JSON.stringify(values, null, 2));\n      setSubmitting(false);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(StyledContactForm, {\n    onChange: formik.handleSubmit,\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      id: \"email\",\n      name: \"email\",\n      value: formik.values.email,\n      onChange: formik.handleChange,\n      error: formik.touched.email && formik.errors.email,\n      helperText: formik.touched.email && formik.errors.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      id: \"theme\",\n      name: \"theme\",\n      value: formik.values.theme,\n      onChange: formik.handleChange,\n      error: formik.touched.theme && formik.errors.theme,\n      helperText: formik.touched.theme && formik.errors.theme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      id: \"question\",\n      name: \"question\",\n      value: formik.values.question,\n      onChange: formik.handleChange,\n      error: formik.touched.question && formik.errors.question,\n      helperText: formik.touched.question && formik.errors.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      color: \"primary\",\n      variant: \"contained\",\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\nconst StyledContactForm = styled.form.attrs(props => ({\n  onSubmit: props.onSubmit,\n  className: props.className\n}))`\n    padding: 1rem;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    border-radius: 0.3rem;\n    background-color: white;\n    box-shadow: 0px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%);\n`;","map":{"version":3,"sources":["/home/dima/Desktop/next-practise/next-notes/components/ContactForm/index.js"],"names":["React","useFormik","Yup","styled","Button","TextField","makeStyles","classes","useStyles","theme","root","margin","spacing","width","background","input","color","button","validationSchema","object","email","string","required","max","question","ContactForm","formik","initialValues","onSubmit","values","setSubmitting","alert","JSON","stringify","handleSubmit","handleChange","touched","errors","StyledContactForm","form","attrs","props","className"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport classes from '*.module.css';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '100%',\n            background: 'white'\n        },\n    },\n    input: {\n        color: 'white',\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n}));\n\nconst validationSchema = Yup.object({\n    email: Yup\n        .string()\n        .email('Invalid email type!')\n        .required('Required'),\n    theme: Yup\n        .string()\n        .max(30, 'Must be 30 characters or less!')\n        .required('Required'),\n    question: Yup\n        .string()\n        .max(200, 'Must be 200 characters or less!')\n        .required('Required')\n});\n\nexport default function ContactForm() {\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            theme: '',\n            question: ''\n        },\n        validationSchema,\n        onSubmit: (values, { setSubmitting }) => {\n            alert(JSON.stringify(values, null, 2));\n            setSubmitting(false);\n        }\n    });\n\n    return (\n        <StyledContactForm\n            onChange={formik.handleSubmit}\n            className={classes.root}\n        >\n            <TextField\n                fullWidth\n                id='email'\n                name='email'\n                value={formik.values.email}\n                onChange={formik.handleChange}\n                error={formik.touched.email && formik.errors.email}\n                helperText={formik.touched.email && formik.errors.email}\n            />\n            <TextField\n                fullWidth\n                id='theme'\n                name='theme'\n                value={formik.values.theme}\n                onChange={formik.handleChange}\n                error={formik.touched.theme && formik.errors.theme}\n                helperText={formik.touched.theme && formik.errors.theme}\n            />\n            <TextField\n                fullWidth\n                id='question'\n                name='question'\n                value={formik.values.question}\n                onChange={formik.handleChange}\n                error={formik.touched.question && formik.errors.question}\n                helperText={formik.touched.question && formik.errors.question}\n            />\n            <Button\n                type='submit'\n                color=\"primary\"\n                variant=\"contained\"\n            >Send</Button>\n        </StyledContactForm>\n    )\n}\n\nconst StyledContactForm = styled.form.attrs(props => ({\n    onSubmit: props.onSubmit,\n    className: props.className,\n}))`\n    padding: 1rem;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    border-radius: 0.3rem;\n    background-color: white;\n    box-shadow: 0px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%);\n`;"]},"metadata":{},"sourceType":"module"}