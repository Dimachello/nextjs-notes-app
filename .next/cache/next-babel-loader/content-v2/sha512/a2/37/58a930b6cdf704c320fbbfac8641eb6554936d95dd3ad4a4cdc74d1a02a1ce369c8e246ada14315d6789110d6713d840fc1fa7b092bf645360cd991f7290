{"ast":null,"code":"export function inputChangeHandler(event, callback) {\n  callback(event.target.value);\n}\nexport function deleteButtonHandler(event, array, setUpdated, storageField) {\n  const id = event.target.id;\n  const copy = [...array];\n  const updated = copy.filter(item => item.id != +id);\n\n  if (!storageField) {\n    const updated = copy.filter(item => item.id != id);\n    setUpdated(() => updated);\n    return;\n  }\n\n  localStorage.setItem(`${storageField}`, JSON.stringify({\n    topics: updated\n  }));\n  setUpdated(() => updated);\n}\nexport function toggleModalHandler(callback) {\n  callback(prevState => !prevState);\n}","map":{"version":3,"sources":["/home/dima/Desktop/next-practise/next-notes/utils/handlers.ts"],"names":["inputChangeHandler","event","callback","target","value","deleteButtonHandler","array","setUpdated","storageField","id","copy","updated","filter","item","localStorage","setItem","JSON","stringify","topics","toggleModalHandler","prevState"],"mappings":"AAAA,OAAO,SAASA,kBAAT,CAA4BC,KAA5B,EAAmCC,QAAnC,EAA6C;AAChDA,EAAAA,QAAQ,CAACD,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAR;AACH;AAED,OAAO,SAASC,mBAAT,CAA6BJ,KAA7B,EAAoCK,KAApC,EAA2CC,UAA3C,EAAuDC,YAAvD,EAAqE;AACxE,QAAMC,EAAE,GAAGR,KAAK,CAACE,MAAN,CAAaM,EAAxB;AACA,QAAMC,IAAI,GAAG,CAAC,GAAGJ,KAAJ,CAAb;AACA,QAAMK,OAAO,GAAGD,IAAI,CAACE,MAAL,CAAYC,IAAI,IAAIA,IAAI,CAACJ,EAAL,IAAW,CAACA,EAAhC,CAAhB;;AACA,MAAI,CAACD,YAAL,EAAmB;AACf,UAAMG,OAAO,GAAGD,IAAI,CAACE,MAAL,CAAYC,IAAI,IAAIA,IAAI,CAACJ,EAAL,IAAWA,EAA/B,CAAhB;AACAF,IAAAA,UAAU,CAAC,MAAMI,OAAP,CAAV;AACA;AACH;;AACDG,EAAAA,YAAY,CAACC,OAAb,CAAsB,GAAEP,YAAa,EAArC,EAAwCQ,IAAI,CAACC,SAAL,CAAe;AAAEC,IAAAA,MAAM,EAAEP;AAAV,GAAf,CAAxC;AACAJ,EAAAA,UAAU,CAAC,MAAMI,OAAP,CAAV;AACH;AAED,OAAO,SAASQ,kBAAT,CAA4BjB,QAA5B,EAAsC;AACzCA,EAAAA,QAAQ,CAACkB,SAAS,IAAI,CAACA,SAAf,CAAR;AACH","sourcesContent":["export function inputChangeHandler(event, callback) {\n    callback(event.target.value);\n}\n\nexport function deleteButtonHandler(event, array, setUpdated, storageField) {\n    const id = event.target.id;\n    const copy = [...array];\n    const updated = copy.filter(item => item.id != +id);\n    if (!storageField) {\n        const updated = copy.filter(item => item.id != id);\n        setUpdated(() => updated);\n        return;\n    }\n    localStorage.setItem(`${storageField}`, JSON.stringify({ topics: updated }));\n    setUpdated(() => updated);\n}\n\nexport function toggleModalHandler(callback) {\n    callback(prevState => !prevState);\n}"]},"metadata":{},"sourceType":"module"}