{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/dima/Desktop/next-practise/next-notes/components/ContactForm/index.js\";\nimport React from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '100%',\n      background: 'white'\n    }\n  },\n  input: {\n    color: 'white'\n  },\n  button: {\n    margin: theme.spacing(1)\n  }\n}));\nconst validationSchema = Yup.object({\n  email: Yup.string().email('Invalid email type!').required('Required'),\n  theme: Yup.string().max(30, 'Must be 30 characters or less!').required('Required'),\n  question: Yup.string().max(200, 'Must be 200 characters or less!').required('Required')\n});\nexport default function ContactForm() {\n  const classes = useStyles();\n\n  const submitHandler = event => {\n    event.preventDefault();\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      theme: '',\n      question: ''\n    },\n    validationSchema,\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      //submitHandler();\n      alert(JSON.stringify(values, null, 2));\n      setSubmitting(false);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(StyledContactForm, {\n    onChange: formik.handleSubmit,\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(FormHeader, {\n      children: \"Enter your data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      required: true,\n      type: \"email\",\n      id: \"email\",\n      name: \"email\",\n      placeholder: \"Email\",\n      value: formik.values.email,\n      onChange: formik.handleChange //error={formik.touched.email && formik.errors.email}\n      //helperText={formik.touched.email && formik.errors.email}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      required: true,\n      type: \"text\",\n      id: \"theme\",\n      name: \"theme\",\n      placeholder: \"Theme\",\n      value: formik.values.theme,\n      onChange: formik.handleChange //error={formik.touched.theme && formik.errors.theme}\n      //helperText={formik.touched.theme && formik.errors.theme}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      required: true,\n      multiline: true,\n      rows: 10,\n      id: \"question\",\n      name: \"question\",\n      placeholder: \"Question\",\n      variant: \"outlined\",\n      value: formik.values.question,\n      onChange: formik.handleChange //error={formik.touched.question && formik.errors.question}\n      //helperText={formik.touched.question && formik.errors.question}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      color: \"primary\",\n      variant: \"contained\",\n      onClick: event => submitHandler(event),\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\nconst StyledContactForm = styled.form.attrs(props => ({\n  onSubmit: props.onSubmit,\n  className: props.className\n}))`\n    padding: 1rem;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    border-radius: 0.3rem;\n    background-color: white;\n    box-shadow: 0px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%);\n`;\nconst FormHeader = styled.h1`\n    width: 100%;\n    justify-self: flex-start;\n`;","map":{"version":3,"sources":["/home/dima/Desktop/next-practise/next-notes/components/ContactForm/index.js"],"names":["React","useFormik","Yup","styled","Button","TextField","makeStyles","useStyles","theme","root","margin","spacing","width","background","input","color","button","validationSchema","object","email","string","required","max","question","ContactForm","classes","submitHandler","event","preventDefault","formik","initialValues","onSubmit","values","setSubmitting","alert","JSON","stringify","handleSubmit","handleChange","StyledContactForm","form","attrs","props","className","FormHeader","h1"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '100%',\n            background: 'white'\n        },\n    },\n    input: {\n        color: 'white',\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n}));\n\nconst validationSchema = Yup.object({\n    email: Yup\n        .string()\n        .email('Invalid email type!')\n        .required('Required'),\n    theme: Yup\n        .string()\n        .max(30, 'Must be 30 characters or less!')\n        .required('Required'),\n    question: Yup\n        .string()\n        .max(200, 'Must be 200 characters or less!')\n        .required('Required')\n});\n\nexport default function ContactForm() {\n\n    const classes = useStyles();\n\n    const submitHandler = event => {\n        event.preventDefault();\n    }\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            theme: '',\n            question: ''\n        },\n        validationSchema,\n        onSubmit: (values, { setSubmitting }) => {\n            //submitHandler();\n            alert(JSON.stringify(values, null, 2));\n            setSubmitting(false);\n        }\n    });\n\n    return (\n        <StyledContactForm\n            onChange={formik.handleSubmit}\n            className={classes.root}\n        >\n            <FormHeader>Enter your data</FormHeader>\n            <TextField\n                fullWidth\n                required\n                type=\"email\"\n                id='email'\n                name='email'\n                placeholder='Email'\n                value={formik.values.email}\n                onChange={formik.handleChange}\n            //error={formik.touched.email && formik.errors.email}\n            //helperText={formik.touched.email && formik.errors.email}\n            />\n            <TextField\n                fullWidth\n                required\n                type=\"text\"\n                id='theme'\n                name='theme'\n                placeholder='Theme'\n                value={formik.values.theme}\n                onChange={formik.handleChange}\n            //error={formik.touched.theme && formik.errors.theme}\n            //helperText={formik.touched.theme && formik.errors.theme}\n            />\n            <TextField\n                fullWidth\n                required\n                multiline\n                rows={10}\n                id='question'\n                name='question'\n                placeholder='Question'\n                variant='outlined'\n                value={formik.values.question}\n                onChange={formik.handleChange}\n            //error={formik.touched.question && formik.errors.question}\n            //helperText={formik.touched.question && formik.errors.question}\n            />\n            <Button\n                type='submit'\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={event => submitHandler(event)}\n            >Send</Button>\n        </StyledContactForm>\n    )\n}\n\nconst StyledContactForm = styled.form.attrs(props => ({\n    onSubmit: props.onSubmit,\n    className: props.className,\n}))`\n    padding: 1rem;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    border-radius: 0.3rem;\n    background-color: white;\n    box-shadow: 0px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%);\n`;\n\nconst FormHeader = styled.h1`\n    width: 100%;\n    justify-self: flex-start;\n`;"]},"metadata":{},"sourceType":"module"}