{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _toConsumableArray from \"/home/dima/Desktop/next-practise/next-notes/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"/home/dima/Desktop/next-practise/next-notes/components/InputSection/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport { StatusModal } from '../common/StatusModal';\nimport { inputChangeHandler } from '../../utils/handlers';\nimport { MainSecondary } from '../../constants/stylesConstants';\nexport default function InputSectionContainer(_ref) {\n  _s();\n\n  var topicsList = _ref.topicsList,\n      getTopicsList = _ref.getTopicsList;\n\n  var _useState = useState(''),\n      input = _useState[0],\n      setInput = _useState[1];\n\n  var addButtonHandler = function addButtonHandler() {\n    if (!input.length) {\n      StatusModal.fire({\n        title: 'Topic name is empty',\n        icon: 'warning'\n      });\n      return;\n    }\n\n    var splitted = input.split('');\n    var filtered = splitted.filter(function (_char) {\n      return _char !== \" \";\n    });\n\n    if (filtered.length === 0) {\n      StatusModal.fire({\n        title: 'Label description is empty'\n      });\n      return;\n    }\n\n    var date = moment().format(\"D:MM:YY MMMM\");\n\n    var updated = _toConsumableArray(topicsList);\n\n    var topic = {\n      id: topicsList.length,\n      createdAt: date,\n      text: input,\n      labels: []\n    };\n    updated.push(topic);\n    localStorage.setItem('list', JSON.stringify({\n      topics: updated\n    }));\n    getTopicsList(updated);\n    setInput(function () {\n      return '';\n    });\n    StatusModal.fire({\n      title: 'Topic added!'\n    });\n  };\n\n  var keyPressHandler = function keyPressHandler(event) {\n    if (event.key === 'Enter') {\n      addButtonHandler();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(InputSection, {\n    children: [/*#__PURE__*/_jsxDEV(InputField, {\n      value: input,\n      onChange: function onChange(event) {\n        return inputChangeHandler(event, setInput);\n      },\n      onKeyPress: keyPressHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddButton, {\n      onClick: addButtonHandler,\n      children: \"Add topic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InputSectionContainer, \"WVveI0ACa0LqOSOlGzu58xcz+KE=\");\n\n_c = InputSectionContainer;\nvar InputSection = styled.section.withConfig({\n  displayName: \"InputSection\",\n  componentId: \"sc-1by77u8-0\"\n})([\"display:flex;justify-content:center;align-items:center;\"]);\n_c2 = InputSection;\nvar InputField = styled.input.attrs(function (props) {\n  return {\n    type: 'text',\n    placeholder: 'Enter topic name'\n  };\n}).withConfig({\n  displayName: \"InputSection__InputField\",\n  componentId: \"sc-1by77u8-1\"\n})([\"padding:0.5rem;border:1px solid transparent;font-size:2rem;border-bottom:1px;border-style:solid;border-color:\", \";outline:none;\"], MainSecondary);\n_c3 = InputField;\nvar AddButton = styled.button.withConfig({\n  displayName: \"InputSection__AddButton\",\n  componentId: \"sc-1by77u8-2\"\n})([\"margin-left:1rem;padding:0.8rem;font-size:1.5rem;border:none;border-radius:0.3rem;background-color:rgb(222,127,82);color:white;outline:none;\"]);\n_c4 = AddButton;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"InputSectionContainer\");\n$RefreshReg$(_c2, \"InputSection\");\n$RefreshReg$(_c3, \"InputField\");\n$RefreshReg$(_c4, \"AddButton\");","map":{"version":3,"sources":["/home/dima/Desktop/next-practise/next-notes/components/InputSection/index.tsx"],"names":["useState","styled","moment","StatusModal","inputChangeHandler","MainSecondary","InputSectionContainer","topicsList","getTopicsList","input","setInput","addButtonHandler","length","fire","title","icon","splitted","split","filtered","filter","char","date","format","updated","topic","id","createdAt","text","labels","push","localStorage","setItem","JSON","stringify","topics","keyPressHandler","event","key","InputSection","section","InputField","attrs","props","type","placeholder","AddButton","button"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport { StatusModal } from '../common/StatusModal';\n\nimport { inputChangeHandler } from '../../utils/handlers';\nimport { MainSecondary } from '../../constants/stylesConstants';\n\nexport default function InputSectionContainer({ topicsList, getTopicsList }) {\n  const [input, setInput] = useState('');\n\n  const addButtonHandler = () => {\n\n    if (!input.length) {\n      StatusModal.fire({\n        title: 'Topic name is empty',\n        icon: 'warning'\n      })\n      return\n    }\n\n    const splitted = input.split('');\n    const filtered = splitted.filter((char) => char !== \" \");\n\n    if (filtered.length === 0) {\n      StatusModal.fire({\n        title: 'Label description is empty'\n      })\n      return;\n    }\n    const date = moment().format(\"D:MM:YY MMMM\")\n    const updated = [...topicsList];\n    const topic = {\n      id: topicsList.length,\n      createdAt: date,\n      text: input,\n      labels: []\n    };\n\n    updated.push(topic);\n\n    localStorage.setItem('list', JSON.stringify({ topics: updated }));\n    getTopicsList(updated);\n    setInput(() => '');\n    StatusModal.fire({\n      title: 'Topic added!'\n    })\n  }\n\n  const keyPressHandler = event => {\n    if (event.key === 'Enter') {\n      addButtonHandler();\n    }\n  }\n\n  return (\n    <InputSection>\n      <InputField\n        value={input}\n        onChange={event => inputChangeHandler(event, setInput)}\n        onKeyPress={keyPressHandler}\n      />\n      <AddButton onClick={addButtonHandler}>Add topic</AddButton>\n    </InputSection>\n  )\n}\n\nconst InputSection = styled.section`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst InputField = styled.input.attrs(props => ({\n  type: 'text',\n  placeholder: 'Enter topic name'\n}))`\n  padding: 0.5rem;\n  border: 1px solid transparent;\n  font-size: 2rem;\n  border-bottom: 1px;\n  border-style: solid;\n  border-color: ${MainSecondary};\n  outline: none;\n`;\n\nconst AddButton = styled.button`\n  margin-left: 1rem;\n  padding: 0.8rem;\n  font-size: 1.5rem;\n  border: none;\n  border-radius: 0.3rem;\n  background-color: rgb(222, 127, 82);\n  color: white;\n  outline: none;\n`;"]},"metadata":{},"sourceType":"module"}