{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/dima/Desktop/next-practise/next-notes/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dima/Desktop/next-practise/next-notes/components/ContactForm/index.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    width: 100%;\\n    justify-self: flex-start;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    padding: 1rem;\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 0.3rem;\\n    background-color: white;\\n    box-shadow: 0px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%);\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: '100%',\n        background: 'white'\n      }\n    },\n    input: {\n      color: 'white'\n    },\n    button: {\n      margin: theme.spacing(1)\n    }\n  };\n});\nvar validationSchema = Yup.object({\n  email: Yup.string().email('Invalid email type!').required('Required'),\n  theme: Yup.string().max(30, 'Must be 30 characters or less!').required('Required'),\n  question: Yup.string().max(200, 'Must be 200 characters or less!').required('Required')\n});\nexport default function ContactForm() {\n  _s();\n\n  var classes = useStyles();\n  var formik = useFormik({\n    initialValues: {\n      email: '',\n      theme: '',\n      question: ''\n    },\n    validationSchema: validationSchema,\n    onSubmit: function onSubmit(values, _ref) {\n      var setSubmitting = _ref.setSubmitting;\n      alert(JSON.stringify(values, null, 2));\n      setSubmitting(false);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(StyledContactForm, {\n    onChange: formik.handleSubmit,\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(FormHeader, {\n      children: \"Enter your data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      required: true,\n      id: \"email\",\n      name: \"email\",\n      value: formik.values.email,\n      onChange: formik.handleChange,\n      error: formik.touched.email && formik.errors.email,\n      helperText: formik.touched.email && formik.errors.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      required: true,\n      id: \"theme\",\n      name: \"theme\",\n      value: formik.values.theme,\n      onChange: formik.handleChange,\n      error: formik.touched.theme && formik.errors.theme,\n      helperText: formik.touched.theme && formik.errors.theme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      required: true,\n      id: \"question\",\n      name: \"question\",\n      value: formik.values.question,\n      onChange: formik.handleChange,\n      error: formik.touched.question && formik.errors.question,\n      helperText: formik.touched.question && formik.errors.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      color: \"primary\",\n      variant: \"contained\",\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ContactForm, \"C5g7rQO6GJW4fOIoJxJdUVhrL6g=\", false, function () {\n  return [useStyles, useFormik];\n});\n\n_c = ContactForm;\nvar StyledContactForm = styled.form.attrs(function (props) {\n  return {\n    onSubmit: props.onSubmit,\n    className: props.className\n  };\n})(_templateObject());\n_c2 = StyledContactForm;\nvar FormHeader = styled.h1(_templateObject2());\n_c3 = FormHeader;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ContactForm\");\n$RefreshReg$(_c2, \"StyledContactForm\");\n$RefreshReg$(_c3, \"FormHeader\");","map":{"version":3,"sources":["/home/dima/Desktop/next-practise/next-notes/components/ContactForm/index.js"],"names":["React","useFormik","Yup","styled","Button","TextField","makeStyles","useStyles","theme","root","margin","spacing","width","background","input","color","button","validationSchema","object","email","string","required","max","question","ContactForm","classes","formik","initialValues","onSubmit","values","setSubmitting","alert","JSON","stringify","handleSubmit","handleChange","touched","errors","StyledContactForm","form","attrs","props","className","FormHeader","h1"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '100%',\n            background: 'white'\n        },\n    },\n    input: {\n        color: 'white',\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n}));\n\nconst validationSchema = Yup.object({\n    email: Yup\n        .string()\n        .email('Invalid email type!')\n        .required('Required'),\n    theme: Yup\n        .string()\n        .max(30, 'Must be 30 characters or less!')\n        .required('Required'),\n    question: Yup\n        .string()\n        .max(200, 'Must be 200 characters or less!')\n        .required('Required')\n});\n\nexport default function ContactForm() {\n\n    const classes = useStyles();\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            theme: '',\n            question: ''\n        },\n        validationSchema,\n        onSubmit: (values, { setSubmitting }) => {\n            alert(JSON.stringify(values, null, 2));\n            setSubmitting(false);\n        }\n    });\n\n    return (\n        <StyledContactForm\n            onChange={formik.handleSubmit}\n            className={classes.root}\n        >\n            <FormHeader>Enter your data</FormHeader>\n            <TextField\n                fullWidth\n                required\n                id='email'\n                name='email'\n                value={formik.values.email}\n                onChange={formik.handleChange}\n                error={formik.touched.email && formik.errors.email}\n                helperText={formik.touched.email && formik.errors.email}\n            />\n            <TextField\n                fullWidth\n                required\n                id='theme'\n                name='theme'\n                value={formik.values.theme}\n                onChange={formik.handleChange}\n                error={formik.touched.theme && formik.errors.theme}\n                helperText={formik.touched.theme && formik.errors.theme}\n            />\n            <TextField\n                fullWidth\n                required\n                id='question'\n                name='question'\n                value={formik.values.question}\n                onChange={formik.handleChange}\n                error={formik.touched.question && formik.errors.question}\n                helperText={formik.touched.question && formik.errors.question}\n            />\n            <Button\n                type='submit'\n                color=\"primary\"\n                variant=\"contained\"\n            >Send</Button>\n        </StyledContactForm>\n    )\n}\n\nconst StyledContactForm = styled.form.attrs(props => ({\n    onSubmit: props.onSubmit,\n    className: props.className,\n}))`\n    padding: 1rem;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    border-radius: 0.3rem;\n    background-color: white;\n    box-shadow: 0px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%);\n`;\n\nconst FormHeader = styled.h1`\n    width: 100%;\n    justify-self: flex-start;\n`;"]},"metadata":{},"sourceType":"module"}