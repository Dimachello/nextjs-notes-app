{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/dima/Desktop/next-practise/next-notes/components/ContactForm/index.js\";\nimport React from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nconst validationSchema = Yup.object({\n  email: Yup.string().email('Invalid email type!').required('Required'),\n  theme: Yup.string().max(30, 'Must be 30 characters or less!').required('Required'),\n  question: Yup.string().max(200, 'Must be 200 characters or less!').required('Required')\n});\nexport default function ContactForm() {\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      theme: '',\n      question: ''\n    },\n    validationSchema,\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      alert(JSON.stringify(values, null, 2));\n      setSubmitting(false);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(StyledContactForm, {\n    onChange: formik.handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      id: \"email\",\n      name: \"email\",\n      value: formik.values.email,\n      onChange: formik.handleChange,\n      error: formik.touched.email && formik.errors.email,\n      helperText: formik.touched.email && formik.errors.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      id: \"theme\",\n      name: \"theme\",\n      value: formik.values.theme,\n      onChange: formik.handleChange,\n      error: formik.touched.theme && formik.errors.theme,\n      helperText: formik.touched.theme && formik.errors.theme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      id: \"question\",\n      name: \"question\",\n      value: formik.values.question,\n      onChange: formik.handleChange,\n      error: formik.touched.question && formik.errors.question,\n      helperText: formik.touched.question && formik.errors.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\nconst StyledContactForm = styled.form.attrs(props => ({\n  onSubmit: props.onSubmit\n}))`\n    padding: 1rem;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    border-radius: 0.3rem;\n    background-color: white;\n    box-shadow: 0px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%);\n`;","map":{"version":3,"sources":["/home/dima/Desktop/next-practise/next-notes/components/ContactForm/index.js"],"names":["React","useFormik","Yup","styled","Button","TextField","validationSchema","object","email","string","required","theme","max","question","ContactForm","formik","initialValues","onSubmit","values","setSubmitting","alert","JSON","stringify","handleSubmit","handleChange","touched","errors","StyledContactForm","form","attrs","props"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nconst validationSchema = Yup.object({\n    email: Yup\n        .string()\n        .email('Invalid email type!')\n        .required('Required'),\n    theme: Yup\n        .string()\n        .max(30, 'Must be 30 characters or less!')\n        .required('Required'),\n    question: Yup\n        .string()\n        .max(200, 'Must be 200 characters or less!')\n        .required('Required')\n});\n\nexport default function ContactForm() {\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            theme: '',\n            question: ''\n        },\n        validationSchema,\n        onSubmit: (values, { setSubmitting }) => {\n            alert(JSON.stringify(values, null, 2));\n            setSubmitting(false);\n        }\n    });\n\n    return (\n        <StyledContactForm onChange={formik.handleSubmit}>\n            <TextField\n                fullWidth\n                id='email'\n                name='email'\n                value={formik.values.email}\n                onChange={formik.handleChange}\n                error={formik.touched.email && formik.errors.email}\n                helperText={formik.touched.email && formik.errors.email}\n            />\n            <TextField\n                fullWidth\n                id='theme'\n                name='theme'\n                value={formik.values.theme}\n                onChange={formik.handleChange}\n                error={formik.touched.theme && formik.errors.theme}\n                helperText={formik.touched.theme && formik.errors.theme}\n            />\n            <TextField\n                fullWidth\n                id='question'\n                name='question'\n                value={formik.values.question}\n                onChange={formik.handleChange}\n                error={formik.touched.question && formik.errors.question}\n                helperText={formik.touched.question && formik.errors.question}\n            />\n            <Button type='submit'>Send</Button>\n        </StyledContactForm>\n    )\n}\n\nconst StyledContactForm = styled.form.attrs(props => ({\n    onSubmit: props.onSubmit\n}))`\n    padding: 1rem;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    border-radius: 0.3rem;\n    background-color: white;\n    box-shadow: 0px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%);\n`;"]},"metadata":{},"sourceType":"module"}